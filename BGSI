--Source
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

--Window
local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "By Oren",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

--Tabs
local Tabs = {
    Home = Window:AddTab({ Title = "Home", Icon = "" }),
    Farming = Window:AddTab({ Title = "Farming", Icon = "" }),
    Hatching = Window:AddTab({ Title = "Hatching", Icon = "" }),
    Pets = Window:AddTab({ Title = "Pets", Icon = "" }),
    Rifts = Window:AddTab({ Title = "Rifts", Icon = "" }),
    Quests = Window:AddTab({ Title = "Quests", Icon = "" }),
    Merchant = Window:AddTab({ Title = "Merchants", Icon = "" }),
    Potions = Window:AddTab({ Title = "Potions", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Others = Window:AddTab({ Title = "Others", Icon = "" }),
    Settings = Window:AddTab({ Title = "Config", Icon = "" }),
}

--Credits
local Section = Tabs.Home:AddSection("Credits")
Section:AddParagraph({
    Title = "This Script Is A Work In Progess I Dunno If This Will Ever Be \nRealeased"
})

-- Farming
local Section = Tabs.Farming:AddSection("Blowing")
local Toggle = Tabs.Farming:AddToggle("Blow", 
{
    Title = "Auto Blow Bubbles", 
    Description = "Automatically Blows Bubbles For You",
    Default = false,
    Callback = function(state)
        if state then
            while state do
                local args = {
                    [1] = "BlowBubble"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
                task.wait()
            end
        end
    end
})

local excluded = {
    ["gift-rift"] = true,
    ["golden-chest"] = true,
    ["royal-chest"] = true,
}

-- Create the dropdown first with empty Values (we'll fill them in)
local MultiDropdown = Tabs.Rifts:AddDropdown("MultiDropdown", {
    Title = "Rifts",
    Description = "Select What Rift You Want To Hatch",
    Values = {}, -- Empty for now
    Multi = true,
    Default = {},
})

-- Create the toggle for moving to the rift
local MoveToRiftToggle = Tabs.Rifts:AddToggle("MoveToRiftToggle", {
    Title = "Move To Selected Rift",
    Default = false,
    Callback = function(state)
        if state then
            -- Get the selected rift name from the dropdown
            local selectedRift = MultiDropdown:GetValue()
            if selectedRift and selectedRift[1] then -- Make sure there is a selected rift
                -- Get the rift's position in the workspace
                local rift = workspace.Rendered.Rifts:FindFirstChild(selectedRift[1])
                if rift then
                    -- Tween the player to the selected rift's position
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    
                    local tweenService = game:GetService("TweenService")
                    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out) -- 2-second tween
                    local goal = {Position = rift.Position + Vector3.new(0, 3, 0)} -- Adjust the height slightly for the player

                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, goal)
                    tween:Play()
                end
            end
        end
    end
})

-- Collect rift names
local riftNames = {}
for _, rift in ipairs(workspace.Rendered.Rifts:GetChildren()) do
    if not excluded[rift.Name] then
        table.insert(riftNames, rift.Name)
    end
end

-- Only update the dropdown if there are valid rift names
if #riftNames > 0 then
    MultiDropdown:SetValues(riftNames)
else
    MultiDropdown:SetValues({"No rifts available"}) -- Placeholder if no rifts found
end

--Config Saving
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
